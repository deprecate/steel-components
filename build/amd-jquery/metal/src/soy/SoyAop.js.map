{"version":3,"sources":["SoyAop.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBA0EE,MAAM","file":"bower_components/metal/src/soy/SoyAop.js","sourcesContent":["'use strict';\n\nimport SoyTemplates from '../soy/SoyTemplates';\n\nvar SoyAop = {\n\t/**\n\t * The function that should be called instead of a template call. If null, the original function\n\t * will be called instead.\n\t * @type {function()}\n\t * @protected\n\t */\n\tinterceptFn_: null,\n\n\t/**\n\t * Gets the original function of the given template function. If no original exists,\n\t * returns the given function itself.\n\t * @param {!function()} fn\n\t * @return {!function()}\n\t */\n\tgetOriginalFn: function(fn) {\n\t\treturn fn.originalFn ? fn.originalFn : fn;\n\t},\n\n\t/**\n\t * Handles a template call, calling the current interception function if one is set, or otherwise\n\t * just calling the original function instead.\n\t * @param {string} compName The name of the component this template function belongs to.\n\t * @param {string} templateName The name of the template this call was made for.\n\t * @param {!function()} originalFn The original template function that was intercepted.\n\t * @param {Object} opt_data Template data object.\n\t * @param {*} opt_ignored\n\t * @param {Object} opt_ijData Template injected data object.\n\t * @return {*} The return value of the function that is called to handle this interception.\n\t */\n\thandleTemplateCall_: function(compName, templateName, originalFn, opt_data, opt_ignored, opt_ijData) {\n\t\tif (SoyAop.interceptFn_) {\n\t\t\treturn SoyAop.interceptFn_.call(null, compName, templateName, originalFn, opt_data, opt_ignored, opt_ijData);\n\t\t} else {\n\t\t\treturn originalFn.call(null, opt_data, opt_ignored, opt_ijData);\n\t\t}\n\t},\n\n\t/**\n\t * Registers the templates for the requested component so they can be intercepted.\n\t * @param {string} compName\n\t */\n\tregisterTemplates: function(compName) {\n\t\tvar compTemplates = SoyTemplates.get(compName);\n\t\tObject.keys(compTemplates).forEach(function(templateName) {\n\t\t\tvar originalFn = compTemplates[templateName];\n\t\t\tif (!originalFn.originalFn) {\n\t\t\t\tcompTemplates[templateName] = SoyAop.handleTemplateCall_.bind(null, compName, templateName, originalFn);\n\t\t\t\tcompTemplates[templateName].originalFn = originalFn;\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Starts intercepting all template calls, replacing them with a call\n\t * to the given function instead.\n\t * @param {!function()} fn\n\t */\n\tstartInterception: function(fn) {\n\t\tSoyAop.interceptFn_ = fn;\n\t},\n\n\t/**\n\t * Stops intercepting template calls.\n\t */\n\tstopInterception: function() {\n\t\tSoyAop.interceptFn_ = null;\n\t}\n};\n\nexport default SoyAop;\n"],"sourceRoot":"/source/"}