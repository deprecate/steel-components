{"version":3,"sources":["Alert.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAgLE,KAAK","file":"bower_components/steel-alert/src/Alert.js","sourcesContent":["'use strict';\n\nimport core from 'bower:metal/src/core';\nimport dom from 'bower:metal/src/dom/dom';\nimport AlertBase from './Alert.soy.js';\nimport Anim from 'bower:metal-anim/src/Anim';\nimport EventHandler from 'bower:metal/src/events/EventHandler';\nimport 'bower:metal/src/dom/events';\n\n/**\n * Alert component.\n */\nclass Alert extends AlertBase {\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\t\tthis.eventHandler_ = new EventHandler();\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tsuper.detached();\n\t\tthis.eventHandler_.removeAllListeners();\n\t\tclearTimeout(this.delay_);\n\t}\n\n\t/**\n\t * Closes the alert, disposing it once the animation ends.\n\t */\n\tclose() {\n\t\tdom.once(this.element, 'animationend', this.dispose.bind(this));\n\t\tdom.once(this.element, 'transitionend', this.dispose.bind(this));\n\t\tthis.eventHandler_.removeAllListeners();\n\t\tthis.syncVisible(false);\n\t}\n\n\t/**\n\t * Handles document click in order to close the alert.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleDocClick_(event) {\n\t\tif (!this.element.contains(event.target)) {\n\t\t\tthis.hide();\n\t\t}\n\t}\n\n\t/**\n\t * Hide the alert.\n\t */\n\thide() {\n\t\tthis.visible = false;\n\t}\n\n\t/**\n\t * Toggles the visibility of the alert.\n\t */\n\ttoggle() {\n\t\tthis.visible = !this.visible;\n\t}\n\n\t/**\n\t * Synchronization logic for `dismissible` attribute.\n\t * @param {boolean} dismissible\n\t */\n\tsyncDismissible(dismissible) {\n\t\tif (dismissible) {\n\t\t\tthis.eventHandler_.add(dom.on(document, 'click', this.handleDocClick_.bind(this)));\n\t\t} else {\n\t\t\tthis.eventHandler_.removeAllListeners();\n\t\t}\n\n\t\tdom[dismissible ? 'addClasses' : 'removeClasses'](this.element, 'alert-dismissible');\n\t}\n\n\t/**\n\t * Synchronization logic for `visible` attribute.\n\t * @param {boolean} visible\n\t */\n\tsyncVisible(visible) {\n\t\tdom.removeClasses(this.element, this.animClasses[visible ? 'hide' : 'show']);\n\t\tdom.addClasses(this.element, this.animClasses[visible ? 'show' : 'hide']);\n\t\t// Some browsers do not fire transitionend events when running in background\n\t\t// tab, see https://bugzilla.mozilla.org/show_bug.cgi?id=683696.\n\t\tAnim.emulateEnd(this.element);\n\n\t\tif (visible && core.isNumber(this.hideDelay)) {\n\t\t\tthis.syncHideDelay(this.hideDelay);\n\t\t}\n\t}\n\n\t/**\n\t * Synchronization logic for `hideDelay` attribute.\n\t * @param {?number} hideDelay\n\t */\n\tsyncHideDelay(hideDelay) {\n\t\tif (core.isNumber(hideDelay) && this.visible) {\n\t\t\tclearTimeout(this.delay_);\n\t\t\tthis.delay_ = setTimeout(this.hide.bind(this), hideDelay);\n\t\t}\n\t}\n}\n\n/**\n * Default alert elementClasses.\n * @default alert\n * @type {string}\n * @static\n */\nAlert.ELEMENT_CLASSES = 'alert';\n\n/**\n * Alert attributes definition.\n * @type {!Object}\n * @static\n */\nAlert.ATTRS = {\n\t/**\n\t * The CSS classes that should be added to the alert when being shown/hidden.\n\t * @type {!Object}\n\t */\n\tanimClasses: {\n\t\tvalidator: core.isObject,\n\t\tvalue: {\n\t\t\tshow: 'fade in',\n\t\t\thide: 'fade'\n\t\t}\n\t},\n\n\t/**\n\t * The body content of the alert.\n\t * @type {string}\n\t */\n\tbody: {\n\t\tvalue: ''\n\t},\n\n\t/**\n\t * Flag indicating if the alert should be dismissable (closeable).\n\t * @type {boolean}\n\t * @default true\n\t */\n\tdismissible: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t},\n\n\t/**\n\t * The CSS classes that should be added to the alert.\n\t * @type {string}\n\t * @default 'alert-success'\n\t */\n\telementClasses: {\n\t\tvalue: 'alert-success'\n\t},\n\n\t/**\n\t * Delay hiding the alert (ms).\n\t * @type {?number}\n\t */\n\thideDelay: {\n\t},\n\n\t/**\n\t * Flag indicating if the alert is visible or not.\n\t * @type {boolean}\n\t * @default false\n\t */\n\tvisible: {\n\t\tvalue: false\n\t}\n};\n\nAlertBase.setImpl(Alert);\n\nexport default Alert;\n"],"sourceRoot":"/source/"}