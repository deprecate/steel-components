{"version":3,"sources":["Autocomplete.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBAgLE,YAAY","file":"bower_components/steel-autocomplete/src/Autocomplete.js","sourcesContent":["'use strict';\n\nimport AutocompleteBase from './AutocompleteBase';\nimport ComponentRegistry from 'bower:metal/src/component/ComponentRegistry';\nimport { CancellablePromise as Promise } from 'bower:metal-promise/src/promise/Promise';\nimport core from 'bower:metal/src/core';\nimport dom from 'bower:metal/src/dom/dom';\nimport Align from 'bower:metal-position/src/Align';\nimport List from 'bower:steel-list/src/List';\n\n/*\n * Autocomplete component.\n */\nclass Autocomplete extends AutocompleteBase {\n\t/**\n\t * @inheritDoc\n\t */\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\tthis.once('render', this.handleRender_);\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tattached() {\n\t\tsuper.attached();\n\t\tthis.list.attach(this.element);\n\t\tthis.on('click', this.genericStopPropagation_);\n\t\tthis.eventHandler_.add(dom.on(this.inputElement, 'focus', this.handleInputFocus_.bind(this)));\n\t\tthis.eventHandler_.add(dom.on(document, 'click', this.handleDocClick_.bind(this)));\n\t\tif (this.visible) {\n\t\t\tthis.align();\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdetached() {\n\t\tsuper.detached();\n\t\tthis.list.detach();\n\t}\n\n\t/**\n\t * Aligns main element to the input element.\n\t */\n\talign() {\n\t\tthis.element.style.width = this.inputElement.offsetWidth + 'px';\n\t\tAlign.align(this.element, this.inputElement, Align.Bottom);\n\t}\n\n\t/**\n\t * Handles document click in order to hide autocomplete. If input element is\n\t * focused autocomplete will not hide.\n\t * @param {!Event} event\n\t */\n\thandleDocClick_() {\n\t\tif (document.activeElement === this.inputElement) {\n\t\t\treturn;\n\t\t}\n\t\tthis.visible = false;\n\t}\n\n\t/**\n\t * Handles input focus.\n\t * @param {!Event} event\n\t */\n\thandleInputFocus_() {\n\t\tthis.request(this.inputElement.value);\n\t}\n\n\t/**\n\t * Handles the `render` event, creating a `List` component and rendering\n\t * it inside this autocomplete.\n\t * @protected\n\t */\n\thandleRender_() {\n\t\tthis.list = new List().render(this.element);\n\t\tthis.list.on('itemSelected', this.onListItemSelected_.bind(this));\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\trequest(query) {\n\t\tvar self = this;\n\t\treturn super.request(query).then(function(data) {\n\t\t\tif (data) {\n\t\t\t\tdata.forEach(self.assertItemObjectStructure_);\n\t\t\t\tself.list.items = data;\n\t\t\t}\n\t\t\tself.visible = !!(data && data.length > 0);\n\t\t});\n\t}\n\n\t/**\n\t * Emits a `select` event with the information about the selected item and\n\t * hides the element.\n\t * @param {!Element} item The list selected item.\n\t * @protected\n\t */\n\tonListItemSelected_(item) {\n\t\tvar selectedIndex = parseInt(item.getAttribute('data-index'), 10);\n\t\tthis.emit('select', this.list.items[selectedIndex]);\n\t\tthis.visible = false;\n\t}\n\n\t/**\n\t * Stops propagation of an event.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\tgenericStopPropagation_(event) {\n\t\tevent.stopPropagation();\n\t}\n\n\t/**\n\t * Synchronization logic for `visible` attribute.\n\t * @param {boolean} visible\n\t */\n\tsyncVisible(visible) {\n\t\tsuper.syncVisible(visible);\n\n\t\tif (visible) {\n\t\t\tthis.align();\n\t\t}\n\t}\n\n\t/**\n\t * Asserts that formatted data is valid. Throws error if item is not in the\n\t * valid syntax.\n\t * @param {*} item\n\t * @protected\n\t */\n\tassertItemObjectStructure_(item) {\n\t\tif (!core.isObject(item)) {\n\t\t\tthrow new Promise.CancellationError('Autocomplete item must be an object');\n\t\t}\n\t\tif (!item.hasOwnProperty('textPrimary')) {\n\t\t\tthrow new Promise.CancellationError('Autocomplete item must be an object with \\'textPrimary\\' key');\n\t\t}\n\t}\n}\n\n/**\n * Attributes definition.\n * @type {!Object}\n * @static\n */\nAutocomplete.ATTRS = {\n\t/**\n\t * Function that converts a given item to the format that should be used by\n\t * the autocomplete.\n\t * @type {!function()}\n\t */\n\tformat: {\n\t\tvalue: function(item) {\n\t\t\treturn core.isString(item) ? {\n\t\t\t\ttextPrimary: item\n\t\t\t} : item;\n\t\t}\n\t}\n};\n\n/**\n * Provides a list of classes which have to be applied to the element's DOM element.\n * @type {string}\n * @static\n * @default 'autocomplete autocomplete-list'\n */\nAutocomplete.ELEMENT_CLASSES = 'autocomplete autocomplete-list';\n\nComponentRegistry.register(Autocomplete);\n\nexport default Autocomplete;\n"],"sourceRoot":"/source/"}