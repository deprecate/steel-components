{"version":3,"sources":["Treeview.js"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mBA4IE,QAAQ","file":"bower_components/crystal-treeview/src/Treeview.js","sourcesContent":["'use strict';\n\nimport dom from 'bower:metal/src/dom/dom';\nimport TreeviewBase from './Treeview.soy';\n\n/**\n * Treeview component.\n */\nclass Treeview extends TreeviewBase {\n\t/**\n\t * Called after this component has been attached to the dom.\n\t */\n\tattached() {\n\t\tthis.on('nodesChanged', this.onNodesChanged_);\n\t\tthis.on('renderSurface', this.handleRenderSurface_);\n\t}\n\n\t/**\n\t * Gets the node object from the nodes attribute that is located at the given\n\t * index path.\n\t * @param {!Array<number>} path An array of indexes indicating where the searched\n\t *   node is located inside the nodes attribute.\n\t * @return {!Object}\n\t */\n\tgetNodeObj(path) {\n\t\tvar obj = this.nodes[path[0]];\n\t\tfor (var i = 1; i < path.length; i++) {\n\t\t\tobj = obj.children[path[i]];\n\t\t}\n\t\treturn obj;\n\t}\n\n\t/**\n\t * Gets the node object that the given element id represents from the nodes\n\t * attribute\n\t * @param {string} id\n\t * @return {!Object}\n\t */\n\tgetNodeObjFromId_(id) {\n\t\tvar path = id.substr(this.id.length + 1).split('-');\n\t\treturn this.getNodeObj(path);\n\t}\n\n\t/**\n\t * This is called when one of this tree view's nodes is clicked.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleNodeClicked_(event) {\n\t\tthis.toggleExpandedState_(event.delegateTarget);\n\t}\n\n\t/**\n\t * This is called when one of this tree view's nodes receives a keypress.\n\t * If the pressed key is ENTER or SPACE, the node's expanded state will be toggled.\n\t * @param {!Event} event\n\t * @protected\n\t */\n\thandleNodeKeyUp_(event) {\n\t\tif (event.keyCode === 13 || event.keyCode === 32) {\n\t\t\tthis.toggleExpandedState_(event.delegateTarget);\n\t\t}\n\t}\n\n\t/**\n\t * Handles a `renderSurface` event. Prevents rerendering surfaces when the changes\n\t * the surface was caused by a ui event that has already updated the screen.\n\t * @param {!Object} data\n\t * @param {!Object} event\n\t * @protected\n\t */\n\thandleRenderSurface_(data, event) {\n\t\tif (this.ignoreSurfaceUpdate_) {\n\t\t\tevent.preventDefault();\n\t\t\tthis.ignoreSurfaceUpdate_ = false;\n\t\t}\n\t}\n\n\t/**\n\t * Fired when the `nodes` attribute changes. Make sure that any other\n\t * updates to the `nodes` attribute made after ignoreSurfaceUpdate_ is\n\t * set to true, cause surfaces to update again.\n\t * @protected\n\t */\n\tonNodesChanged_() {\n\t\tthis.ignoreSurfaceUpdate_ = false;\n\t}\n\n\t/**\n\t * Toggles the expanded state for the given tree node.\n\t * @param {!Element} node\n\t * @protected\n\t */\n\ttoggleExpandedState_(node) {\n\t\tvar nodeObj = this.getNodeObjFromId_(node.parentNode.parentNode.id);\n\t\tnodeObj.expanded = !nodeObj.expanded;\n\t\tif (nodeObj.expanded) {\n\t\t\tdom.addClasses(node.parentNode, 'expanded');\n\t\t\tnode.setAttribute('aria-expanded', 'true');\n\t\t} else {\n\t\t\tdom.removeClasses(node.parentNode, 'expanded');\n\t\t\tnode.setAttribute('aria-expanded', 'false');\n\t\t}\n\n\t\tthis.nodes = this.nodes;\n\t\tthis.ignoreSurfaceUpdate_ = true;\n\t}\n}\n\n/**\n * Default tree view elementClasses.\n * @default treeView\n * @type {string}\n * @static\n */\nTreeview.ELEMENT_CLASSES = 'treeview';\n\n/**\n * Treeview attributes definition.\n * @type {!Object}\n * @static\n */\nTreeview.ATTRS = {\n\t/**\n\t * This tree view's nodes. Each node should have a name, and can optionally\n\t * have nested children nodes. It should also indicate if its children are\n\t * expanded or not.\n\t * @type {Array<!{children: Array, expanded: boolean?, name: string}>}\n\t * @default []\n\t */\n\tnodes: {\n\t\tvalidator: Array.isArray,\n\t\tvalueFn: function() {\n\t\t\treturn [];\n\t\t}\n\t}\n};\n\nTreeviewBase.setImpl(Treeview);\n\nexport default Treeview;\n"],"sourceRoot":"/source/"}