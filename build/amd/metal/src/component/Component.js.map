{"version":3,"sources":["Component.js"],"names":[],"mappingsmBA8sDE,SAAS","file":"bower_components/metal/src/component/Component.js","sourcesContent":["'use strict';\n\nimport array from '../array/array';\nimport core from '../core';\nimport dom from '../dom/dom';\nimport features from '../dom/features';\nimport globalEval from '../eval/globalEval';\nimport html from '../html/html';\nimport object from '../object/object';\nimport string from '../string/string';\nimport Attribute from '../attribute/Attribute';\nimport ComponentCollector from '../component/ComponentCollector';\nimport ComponentRenderer from '../component/ComponentRenderer';\nimport EventEmitterProxy from '../events/EventEmitterProxy';\nimport EventHandler from '../events/EventHandler';\nimport EventsCollector from './EventsCollector';\nimport SurfaceCollector from './SurfaceCollector';\n\n/**\n * Component collects common behaviors to be followed by UI components, such\n * as Lifecycle, bounding box element creation, CSS classes management,\n * events encapsulation and surfaces support. Surfaces are an area of the\n * component that can have information rendered into it. A component\n * manages multiple surfaces. Surfaces are only rendered when its content is\n * modified, representing render performance gains. For each surface, render\n * attributes could be associated, when the render context of a surface gets\n * modified the component Lifecycle re-paints the modified surface\n * automatically. Each component has a `ComponentRenderer`, which is in charge\n * of rendering the surfaces. The renderer to be used is specified by the\n * RENDERER static variable. An example of renderer is the SoyRenderer, which\n * works with soy templates.\n *\n * Example:\n *\n * <code>\n * class CustomComponent extends Component {\n *   constructor(config) {\n *     super(config);\n *   }\n *\n *   attached() {\n *   }\n *\n *   detached() {\n *   }\n * }\n *\n * CustomComponent.RENDERER = MyRenderer;\n *\n * CustomComponent.ATTRS = {\n *   title: { value: 'Title' },\n *   fontSize: { value: '10px' }\n * };\n *\n * CustomComponent.SURFACES = {\n *   header: { renderAttrs: ['title', 'fontSize'] },\n *   bottom: { renderAttrs: ['fontSize'] }\n * };\n * </code>\n *\n * @param {!Object} opt_config An object with the initial values for this component's\n *   attributes.\n * @constructor\n * @extends {Attribute}\n */\nclass Component extends Attribute {\n\tconstructor(opt_config) {\n\t\tsuper(opt_config);\n\n\t\t/**\n\t\t * Holds data about all surfaces that were collected through the\n\t\t * `replaceSurfacePlaceholders_` method.\n\t\t * @type {!Array}\n\t\t * @protected\n\t\t */\n\t\tthis.collectedSurfaces_ = [];\n\n\t\t/**\n\t\t * Gets all nested components.\n\t\t * @type {!Array<!Component>}\n\t\t */\n\t\tthis.components = {};\n\n\t\t/**\n\t\t * Whether the element is being decorated.\n\t\t * @type {boolean}\n\t\t * @protected\n\t\t */\n\t\tthis.decorating_ = false;\n\n\t\t/**\n\t\t * Holds events that were listened through the `delegate` Component function.\n\t\t * @type {EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.delegateEventHandler_ = null;\n\n\t\t/**\n\t\t * Instance of `EventEmitterProxy` which proxies events from the component's\n\t\t * element to the component itself.\n\t\t * @type {EventEmitterProxy}\n\t\t * @protected\n\t\t */\n\t\tthis.elementEventProxy_ = null;\n\n\t\t/**\n\t\t * The `EventHandler` instance for events attached from the `events` attribute.\n\t\t * @type {!EventHandler}\n\t\t * @protected\n\t\t */\n\t\tthis.eventsAttrHandler_ = new EventHandler();\n\n\t\t/**\n\t\t * Collects inline events from html contents.\n\t\t * @type {!EventsCollector}\n\t\t * @protected\n\t\t */\n\t\tthis.eventsCollector_ = new EventsCollector(this);\n\n\t\t/**\n\t\t * Holds the number of generated ids for each surface's contents.\n\t\t * @type {!Object}\n\t\t * @protected\n\t\t */\n\t\tthis.generatedIdCount_ = {};\n\n\t\t/**\n\t\t * Whether the element is in document.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.inDocument = false;\n\n\t\t/**\n\t\t * The initial config option passed to this constructor.\n\t\t * @type {!Object}\n\t\t * @protected\n\t\t */\n\t\tthis.initialConfig_ = opt_config || {};\n\n\t\t/**\n\t\t * The element ids of all surfaces that were removed on a repaint.\n\t\t * @type {!Array<string>}\n\t\t * @protected\n\t\t */\n\t\tthis.removedSurfaces_ = [];\n\n\t\t/**\n\t\t * The ids of the surfaces registered by this component.\n\t\t * @type {!Object<string, boolean>}\n\t\t * @protected\n\t\t */\n\t\tthis.surfaceIds_ = {};\n\n\t\t/**\n\t\t * Whether the element was rendered.\n\t\t * @type {boolean}\n\t\t */\n\t\tthis.wasRendered = false;\n\n\t\t/**\n\t\t * The component's element will be appended to the element this variable is\n\t\t * set to, unless the user specifies another parent when calling `render` or\n\t\t * `attach`.\n\t\t * @type {!Element}\n\t\t */\n\t\tthis.DEFAULT_ELEMENT_PARENT = document.body;\n\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'ELEMENT_CLASSES', this.mergeElementClasses_);\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'ELEMENT_TAG_NAME', array.firstDefinedValue);\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'RENDERER', array.firstDefinedValue);\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'SURFACE_TAG_NAME', array.firstDefinedValue);\n\t\tthis.addSurfacesFromStaticHint_();\n\n\t\tthis.delegateEventHandler_ = new EventHandler();\n\n\t\tthis.created_();\n\t}\n\n\t/**\n\t * Adds the listeners specified in the given object.\n\t * @param {Object} events\n\t * @protected\n\t */\n\taddListenersFromObj_(events) {\n\t\tvar eventNames = Object.keys(events || {});\n\t\tfor (var i = 0; i < eventNames.length; i++) {\n\t\t\tvar info = this.extractListenerInfo_(events[eventNames[i]]);\n\t\t\tif (info.fn) {\n\t\t\t\tvar handler;\n\t\t\t\tif (info.selector) {\n\t\t\t\t\thandler = this.delegate(eventNames[i], info.selector, info.fn);\n\t\t\t\t} else {\n\t\t\t\t\thandler = this.on(eventNames[i], info.fn);\n\t\t\t\t}\n\t\t\t\tthis.eventsAttrHandler_.add(handler);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Adds a simple attribute with the given name, if it doesn't exist yet.\n\t * @param {string} attrName\n\t * @param {Object=} opt_initialValue Optional initial value for the new attr.\n\t * @protected\n\t */\n\taddMissingAttr_(attrName, initialValue) {\n\t\tif (!this.getAttrConfig(attrName)) {\n\t\t\tthis.addAttr(attrName, {}, initialValue);\n\t\t}\n\t}\n\n\t/**\n\t * Overrides `addSingleListener_` from `EventEmitter`, so we can create\n\t * the `EventEmitterProxy` instance only when it's needed for the first\n\t * time.\n\t * @param {string} event\n\t * @param {!Function} listener\n\t * @param {Function=} opt_origin The original function that was added as a\n\t *   listener, if there is any.\n\t * @protected\n\t * @override\n\t */\n\taddSingleListener_(event, listener, opt_origin) {\n\t\tif (!this.elementEventProxy_ &&\n\t\t\tdom.supportsEvent(this.constructor.ELEMENT_TAG_NAME_MERGED, event)) {\n\t\t\tthis.elementEventProxy_ = new EventEmitterProxy(this.element, this);\n\t\t}\n\t\tsuper.addSingleListener_(event, listener, opt_origin);\n\t}\n\n\t/**\n\t * Adds the surface for this component's main element, if it doesn't exist yet.\n\t * @protected\n\t */\n\taddElementSurface_() {\n\t\tif (!this.surfaceIds_[this.id]) {\n\t\t\tthis.addSurface(this.id, {\n\t\t\t\tcomponentName: this.getName()\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * Registers a surface to the component. Surface elements are not\n\t * automatically appended to the component element.\n\t * @param {string} surfaceId The surface id to be registered.\n\t * @param {Object=} opt_surfaceConfig Optional surface configuration.\n\t * @chainable\n\t */\n\taddSurface(surfaceId, opt_surfaceConfig) {\n\t\tvar config = opt_surfaceConfig || {};\n\t\tvar surfaceElementId = this.getSurfaceElementId(surfaceId, config);\n\t\tif (this.surfaceIds_[surfaceElementId]) {\n\t\t\tComponent.surfacesCollector.updateSurface(surfaceElementId, config);\n\t\t} else {\n\t\t\tthis.surfaceIds_[surfaceElementId] = true;\n\t\t\tconfig.cacheState = config.cacheState || Component.Cache.NOT_INITIALIZED;\n\t\t\tComponent.surfacesCollector.addSurface(surfaceElementId, config);\n\t\t\tif (config.componentName && surfaceId !== this.id) {\n\t\t\t\tthis.createSubComponent_(config.componentName, surfaceElementId);\n\t\t\t}\n\t\t}\n\t\tthis.cacheSurfaceRenderAttrs_(surfaceElementId, config.renderAttrs);\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Registers surfaces to the component. Surface elements are not\n\t * automatically appended to the component element.\n\t * @param {!Object.<string, Object=>} configs An object that maps the names\n\t *     of all the surfaces to be added to their configuration objects.\n\t * @chainable\n\t */\n\taddSurfaces(configs) {\n\t\tfor (var surfaceId in configs) {\n\t\t\tthis.addSurface(surfaceId, configs[surfaceId]);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds surfaces from super classes static hint.\n\t * @protected\n\t */\n\taddSurfacesFromStaticHint_() {\n\t\tcore.mergeSuperClassesProperty(this.constructor, 'SURFACES', this.mergeObjects_);\n\t\tthis.surfacesRenderAttrs_ = {};\n\n\t\tvar configs = this.constructor.SURFACES_MERGED;\n\t\tfor (var surfaceId in configs) {\n\t\t\tthis.addSurface(surfaceId, object.mixin({}, configs[surfaceId]));\n\t\t}\n\t}\n\n\t/**\n\t * Adds the given surface element ids to the list of removed surfaces,\n\t * removing their parent reference as well.\n\t * @param {!Array<string>} surfaceElementIds\n\t * @protected\n\t */\n\taddToRemovedSurfaces_(surfaceElementIds) {\n\t\tfor (var i = 0; i < surfaceElementIds.length; i++) {\n\t\t\tvar surface = this.getSurface(surfaceElementIds[i]);\n\t\t\tthis.removedSurfaces_.push(surface);\n\t\t\tsurface.parent = null;\n\t\t}\n\t}\n\n\t/**\n\t * Invokes the attached Lifecycle. When attached, the component element is\n\t * appended to the DOM and any other action to be performed must be\n\t * implemented in this method, such as, binding DOM events. A component can\n\t * be re-attached multiple times.\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM, e.g.\n\t *     `component.render(null, existingElement)`.\n\t * @protected\n\t * @chainable\n\t */\n\tattach(opt_parentElement, opt_siblingElement) {\n\t\tif (!this.inDocument) {\n\t\t\tthis.renderElement_(opt_parentElement, opt_siblingElement);\n\t\t\tthis.inDocument = true;\n\t\t\tif (!this.wasRendered) {\n\t\t\t\tthis.updatePlaceholderSurfaces_();\n\t\t\t}\n\t\t\tthis.attached();\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lifecycle. When attached, the component element is appended to the DOM\n\t * and any other action to be performed must be implemented in this method,\n\t * such as, binding DOM events. A component can be re-attached multiple\n\t * times, therefore the undo behavior for any action performed in this phase\n\t * must be implemented on the detach phase.\n\t */\n\tattached() {}\n\n\t/**\n\t * Builds a fragment element with the given content, so it can be rendered.\n\t * Any script tags inside the content will be moved to the header, so they can\n\t * be reevaluated when this content is rendered.\n\t * @param {string} content\n\t * @return {!Element}\n\t */\n\tbuildFragment_(content) {\n\t\tvar frag = dom.buildFragment(content);\n\t\tif (content.indexOf('<script') === -1) {\n\t\t\treturn frag;\n\t\t}\n\t\tvar scripts = frag.querySelectorAll('script');\n\t\tfor (var i = 0; i < scripts.length; i++) {\n\t\t\tvar script = scripts.item(i);\n\t\t\tif (!script.type || script.type === 'text/javascript') {\n\t\t\t\tglobalEval.runScript(script);\n\t\t\t}\n\t\t}\n\t\treturn frag;\n\t}\n\n\t/**\n\t * Builds a surface placeholder, attaching it to the given data.\n\t * @param {string} surfaceElementId\n\t * @param {Object=} opt_data\n\t * @return {string}\n\t */\n\tbuildPlaceholder(surfaceElementId, opt_data) {\n\t\tif (surfaceElementId && opt_data) {\n\t\t\topt_data.surfaceElementId = surfaceElementId;\n\t\t\tthis.addSurface(surfaceElementId, opt_data);\n\t\t}\n\t\treturn '%%%%~s' + (surfaceElementId ? '-' + surfaceElementId : '') + '~%%%%';\n\t}\n\n\t/**\n\t * Caches the given content for the surface with the requested id.\n\t * @param {string} surfaceElementId\n\t * @param {string} content\n\t */\n\tcacheSurfaceContent(surfaceElementId, content) {\n\t\tvar cacheState = this.computeSurfaceCacheState_(content);\n\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\tsurface.cacheState = cacheState;\n\t}\n\n\t/**\n\t * Caches surface render attributes into a O(k) flat map representation.\n\t * Relevant for performance to calculate the surfaces group that were\n\t * modified by attributes mutation.\n\t * @param {string} surfaceElementId The surface id to be cached into the flat map.\n\t * @param {Array} renderAttrs The surface's render attrs.\n\t * @protected\n\t */\n\tcacheSurfaceRenderAttrs_(surfaceElementId, renderAttrs) {\n\t\tvar attrs = renderAttrs || [];\n\t\tfor (var i = 0; i < attrs.length; i++) {\n\t\t\tif (!this.surfacesRenderAttrs_[attrs[i]]) {\n\t\t\t\tthis.surfacesRenderAttrs_[attrs[i]] = {};\n\t\t\t\tthis.addMissingAttr_(attrs[i], this.initialConfig_[attrs[i]]);\n\t\t\t}\n\t\t\tthis.surfacesRenderAttrs_[attrs[i]][surfaceElementId] = true;\n\t\t}\n\t}\n\n\t/**\n\t * Checks if the given content has an element tag with the given id.\n\t * @param {string} content\n\t * @param {string} id\n\t * @return {boolean}\n\t * @protected\n\t */\n\tcheckHasElementTag_(content, id) {\n\t\treturn content.indexOf(' id=\"' + id + '\"') !== -1;\n\t}\n\n\t/**\n\t * Clears the cache of the specified surface.\n\t * @param {string} surfaceIds\n\t */\n\tclearSurfaceCache(surfaceId) {\n\t\tthis.getSurface(surfaceId).cacheState = Component.Cache.NOT_INITIALIZED;\n\t}\n\n\t/**\n\t * Compares cache states.\n\t * @param {number} currentCacheState\n\t * @param {number} previousCacheState\n\t * @return {boolean} True if there's a cache hit, or false for cache miss.\n\t */\n\tcompareCacheStates_(currentCacheState, previousCacheState) {\n\t\treturn currentCacheState !== Component.Cache.NOT_INITIALIZED &&\n\t\t\tcurrentCacheState === previousCacheState;\n\t}\n\n\t/**\n\t * Computes the cache state for the surface content. If value is string, the\n\t * cache state is represented by its hashcode.\n\t * @param {?string} value The value to calculate the cache state.\n\t * @return {Object} The computed cache state.\n\t * @protected\n\t */\n\tcomputeSurfaceCacheState_(value) {\n\t\tvalue = value || '';\n\t\tif (features.checkAttrOrderChange()) {\n\t\t\tvalue = this.convertHtmlToBrowserFormat_(value);\n\t\t}\n\t\treturn string.hashCode(value);\n\t}\n\n\t/**\n\t * Converts the given html string to the format the current browser uses\n\t * when html is rendered. This is done by rendering the html in a temporary\n\t * element, and returning its resulting rendered html.\n\t * @param {string} htmlString The html to be converted.\n\t * @return {string}\n\t * @protected\n\t */\n\tconvertHtmlToBrowserFormat_(htmlString) {\n\t\tvar element = document.createElement('div');\n\t\tdom.append(element, htmlString);\n\t\treturn element.innerHTML;\n\t}\n\n\t/**\n\t * Creates a surface that was found via a string placeholder.\n\t * @param {string} parentSurfaceElementId The id of the surface element that contains\n\t *   the surface to be created, or undefined if there is none.\n\t * @param {string=} opt_surfaceElementId\n\t * @return {!Object} The created surface.\n\t * @protected\n\t */\n\tcreatePlaceholderSurface_(parentSurfaceElementId, opt_surfaceElementId) {\n\t\tvar surfaceElementId = opt_surfaceElementId;\n\t\tif (!core.isDefAndNotNull(surfaceElementId)) {\n\t\t\tsurfaceElementId = this.generateSurfaceElementId(parentSurfaceElementId);\n\t\t}\n\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\tif (!surface) {\n\t\t\tsurface = {\n\t\t\t\tsurfaceElementId: surfaceElementId\n\t\t\t};\n\t\t\tthis.addSurface(surfaceElementId, surface);\n\t\t}\n\t\treturn surface;\n\t}\n\n\t/**\n\t * Creates a sub component.\n\t * @param {string} componentName\n\t * @param {string} componentId\n\t * @return {!Component}\n\t * @protected\n\t */\n\tcreateSubComponent_(componentName, componentId) {\n\t\tthis.components[componentId] = Component.componentsCollector.createComponent(\n\t\t\tcomponentName,\n\t\t\tcomponentId,\n\t\t\tthis.getSurfaceFromElementId(componentId).componentData\n\t\t);\n\t\treturn this.components[componentId];\n\t}\n\n\t/**\n\t * Creates the surface element with its id namespaced to the component id.\n\t * @param {string} surfaceElementId The id of the element for the surface to be\n\t *   created.\n\t * @return {Element} The surface element.\n\t * @protected\n\t */\n\tcreateSurfaceElement_(surfaceElementId) {\n\t\tvar el = document.createElement(this.constructor.SURFACE_TAG_NAME_MERGED);\n\t\tel.id = surfaceElementId;\n\t\treturn el;\n\t}\n\n\t/**\n\t * Decorates this component as a subcomponent, meaning that no rendering is\n\t * needed since it was already rendered by the parent component. Handles the\n\t * same logics that `renderAsSubComponent`, but also makes sure that the\n\t * surfaces content is updated if the html is incorrect for the given data.\n\t * @param {string=} opt_content The content that was already rendered for this\n\t *   component.\n\t */\n\tdecorateAsSubComponent(opt_content) {\n\t\tthis.decorating_ = true;\n\t\tthis.renderAsSubComponent(opt_content);\n\t\tthis.decorating_ = false;\n\t}\n\n\t/**\n\t * Listens to a delegate event on the component's element.\n\t * @param {string} eventName The name of the event to listen to.\n\t * @param {string} selector The selector that matches the child elements that\n\t *   the event should be triggered for.\n\t * @param {!function(!Object)} callback Function to be called when the event is\n\t *   triggered. It will receive the normalized event object.\n\t * @return {!DomEventHandle} Can be used to remove the listener.\n\t */\n\tdelegate(eventName, selector, callback) {\n\t\tvar handle = dom.delegate(this.element, eventName, selector, callback);\n\t\tthis.delegateEventHandler_.add(handle);\n\t\treturn handle;\n\t}\n\n\t/**\n\t * Invokes the detached Lifecycle. When detached, the component element is\n\t * removed from the DOM and any other action to be performed must be\n\t * implemented in this method, such as, unbinding DOM events. A component\n\t * can be detached multiple times.\n\t * @chainable\n\t */\n\tdetach() {\n\t\tif (this.inDocument) {\n\t\t\tif (this.element.parentNode) {\n\t\t\t\tthis.element.parentNode.removeChild(this.element);\n\t\t\t}\n\t\t\tthis.inDocument = false;\n\t\t\tthis.detached();\n\t\t}\n\t\tthis.eventsCollector_.detachAllListeners();\n\t\treturn this;\n\t}\n\n\t/**\n\t * Lifecycle. When detached, the component element is removed from the DOM\n\t * and any other action to be performed must be implemented in this method,\n\t * such as, unbinding DOM events. A component can be detached multiple\n\t * times, therefore the undo behavior for any action performed in this phase\n\t * must be implemented on the attach phase.\n\t */\n\tdetached() {}\n\n\t/**\n\t * Internal implementation for the creation phase of the component.\n\t * @protected\n\t */\n\tcreated_() {\n\t\tthis.on('eventsChanged', this.onEventsChanged_);\n\t\tthis.addListenersFromObj_(this.events);\n\n\t\tthis.on('attrsChanged', this.handleAttributesChanges_);\n\t\tComponent.componentsCollector.addComponent(this);\n\n\t\tthis.on('renderSurface', this.defaultRenderSurfaceFn_, true);\n\t}\n\n\t/**\n\t * Lifecycle. Creates the component using existing DOM elements. Often the\n\t * component can be created using existing elements in the DOM to leverage\n\t * progressive enhancement. Any extra operation necessary to prepare the\n\t * component DOM must be implemented in this phase. Decorate phase replaces\n\t * render phase.\n\t *\n\t * Decoration Lifecycle:\n\t *   decorate - Decorate is manually called.\n\t *   retrieve existing html - The cache for all surfaces is filled with any\n\t *     existing html from the document.\n\t *   render surfaces - Surfaces that cause a cache miss are rendered, including\n\t *     the main content (`getElementContent`).\n\t *   attribute synchronization - All synchronization methods are called.\n\t *   attach - Attach Lifecycle is called.\n\t * @chainable\n\t */\n\tdecorate() {\n\t\tthis.decorating_ = true;\n\t\tthis.render();\n\t\tthis.decorating_ = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * The default implementation for the `renderSurface` event. Renders\n\t * content into a surface. If the specified content is the same of the\n\t * current surface content, nothing happens. If the surface cache state\n\t * is not initialized or the content is not eligible for cache or content\n\t * is different, the surfaces re-renders.\n\t * @param {!Object} data\n\t * @protected\n\t */\n\tdefaultRenderSurfaceFn_(data) {\n\t\tvar surfaceElementId = data.surfaceElementId;\n\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\tif (surface.componentName && surfaceElementId !== this.id) {\n\t\t\tthis.renderComponentSurface_(surfaceElementId, data.content);\n\t\t\treturn;\n\t\t}\n\n\t\tvar content = data.content || this.getSurfaceContent_(surfaceElementId);\n\t\tvar cacheContent = data.cacheContent || content;\n\t\tvar cacheHit = surface.static;\n\t\tif (!surface.static) {\n\t\t\tvar previousCacheState = surface.cacheState;\n\t\t\tthis.cacheSurfaceContent(surfaceElementId, cacheContent);\n\t\t\tcacheHit = this.compareCacheStates_(surface.cacheState, previousCacheState);\n\t\t}\n\n\t\tif (cacheHit) {\n\t\t\tthis.renderPlaceholderSurfaceContents_(cacheContent, surfaceElementId);\n\t\t} else {\n\t\t\tthis.eventsCollector_.attachListeners(cacheContent, surfaceElementId);\n\t\t\tthis.replaceSurfaceContent_(surfaceElementId, surface, content);\n\t\t}\n\t}\n\n\t/**\n\t * Calls `dispose` on all subcomponents.\n\t * @param {!Array<string>} ids\n\t * @protected\n\t */\n\tdisposeSubComponents_(ids) {\n\t\tfor (var i = 0; i < ids.length; i++) {\n\t\t\tvar component = this.components[ids[i]];\n\t\t\tif (!component.isDisposed()) {\n\t\t\t\tComponent.componentsCollector.removeComponent(component);\n\t\t\t\tcomponent.dispose();\n\t\t\t\tdelete this.components[ids[i]];\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @inheritDoc\n\t */\n\tdisposeInternal() {\n\t\tthis.detach();\n\n\t\tif (this.elementEventProxy_) {\n\t\t\tthis.elementEventProxy_.dispose();\n\t\t\tthis.elementEventProxy_ = null;\n\t\t}\n\n\t\tthis.delegateEventHandler_.removeAllListeners();\n\t\tthis.delegateEventHandler_ = null;\n\n\t\tthis.disposeSubComponents_(Object.keys(this.components));\n\t\tthis.components = null;\n\t\tthis.generatedIdCount_ = null;\n\t\tthis.surfacesRenderAttrs_ = null;\n\n\t\tthis.eventsCollector_.dispose();\n\t\tthis.eventsCollector_ = null;\n\n\t\tObject.keys(this.surfaceIds_).forEach(surfaceId => this.removeSurface(surfaceId));\n\t\tthis.surfaceIds_ = null;\n\n\t\tsuper.disposeInternal();\n\t}\n\n\t/**\n\t * Emits the `renderSurface` event, which will cause the specified surface to be\n\t * rendered, unless it's prevented.\n\t * @param {string} surfaceElementId\n\t * @param {string=} opt_content\n\t * @param {string=} opt_cacheContent\n\t * @param {Array<string>=} opt_renderAttrs The render attributes that caused the\n\t *   surface to be rerendered, or nothing if that wasn't the cause of the update.\n\t * @protected\n\t */\n\temitRenderSurfaceEvent_(surfaceElementId, opt_content, opt_cacheContent, opt_renderAttrs) {\n\t\tthis.emit('renderSurface', {\n\t\t\tcacheContent: opt_cacheContent,\n\t\t\tcontent: opt_content,\n\t\t\trenderAttrs: opt_renderAttrs || [],\n\t\t\tsurfaceElementId: surfaceElementId,\n\t\t\tsurfaceId: this.getSurfaceId(this.getSurfaceFromElementId(surfaceElementId))\n\t\t});\n\t}\n\n\t/**\n\t * Extracts listener info from the given value.\n\t * @param {function()|string|{selector:string,fn:function()|string}} value\n\t * @return {!{selector:string,fn:function()}}\n\t * @protected\n\t */\n\textractListenerInfo_(value) {\n\t\tvar info = {\n\t\t\tfn: value\n\t\t};\n\t\tif (core.isObject(value) && !core.isFunction(value)) {\n\t\t\tinfo.selector = value.selector;\n\t\t\tinfo.fn = value.fn;\n\t\t}\n\t\tif (core.isString(info.fn)) {\n\t\t\tinfo.fn = this.eventsCollector_.getListenerFn(info.fn);\n\t\t}\n\t\treturn info;\n\t}\n\n\t/**\n\t * Fires attributes synchronization changes for attributes.\n\t * @protected\n\t */\n\tsyncAttrs_() {\n\t\tvar attrNames = this.getAttrNames();\n\t\tfor (var i = 0; i < attrNames.length; i++) {\n\t\t\tthis.fireAttrChange_(attrNames[i]);\n\t\t}\n\t}\n\n\t/**\n\t * Fires attributes synchronization changes for attributes.\n\t * @param {Object.<string, Object>} changes Object containing the attribute\n\t *     name as key and an object with newVal and prevVal as value.\n\t * @protected\n\t */\n\tsyncAttrsFromChanges_(changes) {\n\t\tfor (var attr in changes) {\n\t\t\tthis.fireAttrChange_(attr, changes[attr]);\n\t\t}\n\t}\n\n\t/**\n\t * Finds the element that matches the given id on this component. This searches\n\t * on the document first, for performance. If the element is not found, it's\n\t * searched in the component's element directly.\n\t * @param {string} id\n\t * @return {Element}\n\t * @protected\n\t */\n\tfindElementById_(id) {\n\t\treturn document.getElementById(id) || (this.element && this.element.querySelector('#' + id));\n\t}\n\n\t/**\n\t * Finds the element with the given id in the given content, if there is one.\n\t * @param {string} id\n\t * @param {!Element|string} content\n\t * @return {Element}\n\t * @protected\n\t */\n\tfindElementInContent_(id, content) {\n\t\tcontent = core.isString(content) ? dom.buildFragment(content) : content;\n\t\tvar firstChild = content.childNodes[0];\n\t\tif (firstChild && firstChild.id === id) {\n\t\t\treturn firstChild;\n\t\t}\n\t}\n\n\t/**\n\t * Fires attribute synchronization change for the attribute.\n\t * @param {Object.<string, Object>} change Object containing newVal and\n\t *     prevVal keys.\n\t * @protected\n\t */\n\tfireAttrChange_(attr, opt_change) {\n\t\tvar fn = this['sync' + attr.charAt(0).toUpperCase() + attr.slice(1)];\n\t\tif (core.isFunction(fn)) {\n\t\t\tif (!opt_change) {\n\t\t\t\topt_change = {\n\t\t\t\t\tnewVal: this[attr],\n\t\t\t\t\tprevVal: undefined\n\t\t\t\t};\n\t\t\t}\n\t\t\tfn.call(this, opt_change.newVal, opt_change.prevVal);\n\t\t}\n\t}\n\n\t/**\n\t * Generates an id for a surface that was found inside the contents of the main\n\t * element or of a parent surface.\n\t * @param {string} parentSurfaceElementId The id of the parent surface, or undefined\n\t *   if there is none.\n\t * @return {string} The generated id.\n\t */\n\tgenerateSurfaceElementId(parentSurfaceElementId) {\n\t\tthis.generatedIdCount_[parentSurfaceElementId] = (this.generatedIdCount_[parentSurfaceElementId] || 0) + 1;\n\t\treturn parentSurfaceElementId + '-s' + this.generatedIdCount_[parentSurfaceElementId];\n\t}\n\n\t/**\n\t * Gets the html that should be used to build this component's main element with\n\t * some content.\n\t * @param {string} content\n\t * @return {string}\n\t */\n\tgetComponentHtml(content) {\n\t\treturn this.wrapContentIfNecessary(content, this.id, this.constructor.ELEMENT_TAG_NAME_MERGED);\n\t}\n\n\t/**\n\t * Returns a map of all subcomponents with ids that have the specified prefix.\n\t * @param {string} prefix\n\t * @return {!Object<string, !Component>}\n\t */\n\tgetComponentsWithPrefix(prefix) {\n\t\tvar ids = Object.keys(this.components)\n\t\t\t.filter(id => id.indexOf(prefix) === 0);\n\t\tvar map = {};\n\t\tids.forEach(id => map[id] = this.components[id]);\n\t\treturn map;\n\t}\n\n\t/**\n\t * Gets the name of this component. If the `NAME` static variable is set, this will\n\t * be the component's name. Otherwise, it will be formed from the constructor's\n\t * function name.\n\t * @return {string}\n\t */\n\tgetName() {\n\t\treturn this.constructor.NAME || core.getFunctionName(this.constructor);\n\t}\n\n\t/**\n\t * Calls `getElementContent` and creating its surface if it hasn't been created yet.\n\t * @param {string=} opt_skipContents True if only the element's tag needs to be rendered.\n\t * @return {Object|string} The content to be rendered. If the content is a\n\t *   string, surfaces can be represented by placeholders in the format specified\n\t *   by Component.SURFACE_REGEX. Also, if the string content's main wrapper has\n\t *   the component's id, then it will be used to render the main element tag.\n\t * @protected\n\t */\n\tgetElementContent_(opt_skipContents) {\n\t\tthis.addElementSurface_();\n\t\treturn this.getRenderer().getSurfaceContent(this.getSurface(this.id), this, opt_skipContents);\n\t}\n\n\t/**\n\t * Calls `getElementContent` and replaces all placeholders in the returned content.\n\t * This is called when rendering sub components, so it also attaches listeners to\n\t * the original content.\n\t * @return {string} The content with all placeholders already replaced.\n\t */\n\tgetElementExtendedContent() {\n\t\tvar content = this.getElementContent_() || '';\n\t\tthis.eventsCollector_.attachListeners(content, this.id);\n\t\tthis.cacheSurfaceContent(this.id, content);\n\t\treturn this.replaceSurfacePlaceholders_(content, this.id, this.getSurface(this.id));\n\t}\n\n\t/**\n\t * Gets surfaces that got modified by the specified attributes changes.\n\t * @param {Object.<string, Object>} changes Object containing the attribute\n\t *     name as key and an object with newVal and prevVal as value.\n\t * @return {Object.<string, boolean>} Object containing modified surface ids\n\t *     as key and true as value.\n\t */\n\tgetModifiedSurfacesFromChanges_(changes) {\n\t\tvar surfaces = {};\n\t\tfor (var attr in changes) {\n\t\t\tvar surfaceNames = Object.keys(this.surfacesRenderAttrs_[attr] || {});\n\t\t\tfor (var i = 0; i < surfaceNames.length; i++) {\n\t\t\t\tif (!surfaces[surfaceNames[i]]) {\n\t\t\t\t\tsurfaces[surfaceNames[i]] = [];\n\t\t\t\t}\n\t\t\t\tsurfaces[surfaceNames[i]].push(attr);\n\t\t\t}\n\t\t}\n\t\treturn surfaces;\n\t}\n\n\t/**\n\t * Same as `getSurfaceHtml_`, but only called for non component surfaces.\n\t * @param {string} surfaceElementId\n\t * @param {string} content\n\t * @return {string}\n\t */\n\tgetNonComponentSurfaceHtml(surfaceElementId, content) {\n\t\treturn this.wrapContentIfNecessary(content, surfaceElementId, this.constructor.SURFACE_TAG_NAME_MERGED);\n\t}\n\n\t/**\n\t * Gets the `ComponentRenderer` object for this component.\n\t * @return {!ComponentRenderer}\n\t */\n\tgetRenderer() {\n\t\treturn this.constructor.RENDERER_MERGED;\n\t}\n\n\t/**\n\t * Gets surface configuration object. If surface is not registered returns\n\t * null.\n\t * @param {string} surfaceId The surface id or its element id.\n\t * @return {Object} The surface configuration object.\n\t */\n\tgetSurface(surfaceId) {\n\t\tvar surface = this.getSurfaceFromElementId(this.getSurfaceElementId(surfaceId));\n\t\treturn surface ? surface : this.getSurfaceFromElementId(surfaceId);\n\t}\n\n\t/**\n\t * Gets the content for the requested surface. Calls `getSurfaceContent` for non\n\t * component surfaces, handling component surfaces automatically.\n\t * @param {string} surfaceElementId The surface element id.\n\t * @return {string} The content to be rendered.\n\t * @protected\n\t */\n\tgetSurfaceContent_(surfaceElementId) {\n\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\tif (surface.componentName && surfaceElementId !== this.id) {\n\t\t\tvar component = ComponentCollector.components[surfaceElementId];\n\t\t\tif (component.wasRendered) {\n\t\t\t\treturn '';\n\t\t\t} else {\n\t\t\t\treturn component.getElementExtendedContent();\n\t\t\t}\n\t\t} else {\n\t\t\treturn this.getRenderer().getSurfaceContent(surface, this) || '';\n\t\t}\n\t}\n\n\t/**\n\t * Queries from the document or creates an element for the surface. Surface\n\t * elements have its surface id namespaced to the component id, e.g. for a\n\t * component with id `gallery` and a surface with id `pictures` the surface\n\t * element will be represented by the id `gallery-pictures`. Surface\n\t * elements must also be appended to the component element.\n\t * @param {string} surfaceId The surface id.\n\t * @param {Object=} opt_surface The surface's config. If not given, it will\n\t *   be fetched.\n\t * @return {Element} The surface element or null if surface not registered.\n\t */\n\tgetSurfaceElement(surfaceId, opt_surface) {\n\t\tvar surface = opt_surface || this.getSurface(surfaceId);\n\t\tif (!surface) {\n\t\t\treturn null;\n\t\t}\n\t\tif (!surface.element) {\n\t\t\tif (surface.componentName) {\n\t\t\t\tvar component = ComponentCollector.components[surfaceId];\n\t\t\t\tif (component) {\n\t\t\t\t\tsurface.element = component.element;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tvar surfaceElementId = this.getSurfaceElementId(surfaceId, surface);\n\t\t\t\tsurface.element = this.findElementById_(surfaceElementId) ||\n\t\t\t\t\tthis.createSurfaceElement_(surfaceElementId);\n\t\t\t}\n\t\t}\n\t\treturn surface.element;\n\t}\n\n\t/**\n\t * Adds the component id as the prefix of the given surface id if necessary.\n\t * @param {string} surfaceId\n\t * @param {Object=} opt_surface The surface data.\n\t * @return {string}\n\t */\n\tgetSurfaceElementId(surfaceId, opt_surface) {\n\t\tvar surface = opt_surface || {};\n\t\tif (surface.surfaceElementId) {\n\t\t\treturn surface.surfaceElementId;\n\t\t} else if (surface.componentName || this.hasComponentPrefix_(surfaceId)) {\n\t\t\treturn surfaceId;\n\t\t} else {\n\t\t\treturn this.prefixSurfaceId(surfaceId);\n\t\t}\n\t}\n\n\t/**\n\t * Gets surface configuration object. This is similar to `getSurface`, but\n\t * receives the surface's element id, while `getSurface` can also receive\n\t * a local surface id.\n\t * @param {string} surfaceElementId The surface's element id\n\t * @return {Object} The surface configuration object.\n\t */\n\tgetSurfaceFromElementId(surfaceElementId) {\n\t\treturn Component.surfacesCollector.getSurface(surfaceElementId);\n\t}\n\n\t/**\n\t * Gets the html that should be used to build a surface's main element with its\n\t * content.\n\t * @param {!Object} surface\n\t * @param {string} content\n\t * @return {string}\n\t * @protected\n\t */\n\tgetSurfaceHtml_(surface, content) {\n\t\tvar surfaceElementId = surface.surfaceElementId;\n\t\tif (surface.componentName) {\n\t\t\treturn ComponentCollector.components[surfaceElementId].getComponentHtml(content);\n\t\t} else {\n\t\t\treturn this.getNonComponentSurfaceHtml(surfaceElementId, content);\n\t\t}\n\t}\n\n\t/**\n\t * Gets the surface id for the given surface.\n\t * @param {!Object} surface\n\t * @return {string}\n\t */\n\tgetSurfaceId(surface) {\n\t\tif (surface.componentName || !this.hasComponentPrefix_(surface.surfaceElementId)) {\n\t\t\treturn surface.surfaceElementId;\n\t\t} else {\n\t\t\treturn surface.surfaceElementId.substr(this.id.length + 1);\n\t\t}\n\t}\n\n\t/**\n\t * A map of surface ids to the respective surface object.\n\t * @return {!Object}\n\t */\n\tgetSurfaces() {\n\t\tvar surfaces = {};\n\t\tObject.keys(this.surfaceIds_).forEach(function(surfaceElementId) {\n\t\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\t\tsurfaces[this.getSurfaceId(surface)] = surface;\n\t\t}.bind(this));\n\t\treturn surfaces;\n\t}\n\n\t/**\n\t * Handles attributes batch changes. Responsible for surface mutations and\n\t * attributes synchronization.\n\t * @param {Event} event\n\t * @protected\n\t */\n\thandleAttributesChanges_(event) {\n\t\tif (this.inDocument) {\n\t\t\tthis.renderSurfacesContent_(this.getModifiedSurfacesFromChanges_(event.changes));\n\t\t}\n\t\tthis.syncAttrsFromChanges_(event.changes);\n\t\tthis.emit('attrsSynced', event);\n\t}\n\n\t/**\n\t * Checks if the given surface id has this component's prefix.\n\t * @param {string} surfaceId\n\t * @return {boolean}\n\t * @protected\n\t */\n\thasComponentPrefix_(surfaceId) {\n\t\treturn surfaceId.substr(0, this.id.length) === this.id &&\n\t\t\t(surfaceId.length === this.id.length || surfaceId[this.id.length] === '-');\n\t}\n\n\t/**\n\t * Fired when the `events` attribute value is changed.\n\t * @param {!Object} event\n\t * @protected\n\t */\n\tonEventsChanged_(event) {\n\t\tthis.eventsAttrHandler_.removeAllListeners();\n\t\tthis.addListenersFromObj_(event.newVal);\n\t}\n\n\t/**\n\t * Makes an unique id for the component.\n\t * @return {string} Unique id.\n\t * @protected\n\t */\n\tmakeId_() {\n\t\treturn 'metal_c_' + core.getUid(this);\n\t}\n\n\t/**\n\t * Merges an array of values for the ELEMENT_CLASSES property into a single object.\n\t * @param {!Array.<string>} values The values to be merged.\n\t * @return {!string} The merged value.\n\t * @protected\n\t */\n\tmergeElementClasses_(values) {\n\t\tvar marked = {};\n\t\treturn values.filter(function(val) {\n\t\t\tif (!val || marked[val]) {\n\t\t\t\treturn false;\n\t\t\t} else {\n\t\t\t\tmarked[val] = true;\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}).join(' ');\n\t}\n\n\t/**\n\t * Merges an array of objects into a single object. Used by the SURFACES static\n\t * variable.\n\t * @param {!Array} values The values to be merged.\n\t * @return {!Object} The merged value.\n\t * @protected\n\t */\n\tmergeObjects_(values) {\n\t\treturn object.mixin.apply(null, [{}].concat(values.reverse()));\n\t}\n\n\t/**\n\t * Prefixes the given surface id with this component's id.\n\t * @param {string} surfaceId\n\t * @return {string}\n\t */\n\tprefixSurfaceId(surfaceId) {\n\t\treturn this.id + '-' + surfaceId;\n\t}\n\n\t/**\n\t * Unregisters a surface and removes its element from the DOM.\n\t * @param {string} surfaceId The surface id.\n\t * @chainable\n\t */\n\tremoveSurface(surfaceId) {\n\t\tvar el = this.getSurfaceElement(surfaceId);\n\t\tif (el && el.parentNode) {\n\t\t\tel.parentNode.removeChild(el);\n\t\t}\n\t\tvar surfaceElementId = this.getSurfaceElementId(surfaceId, this.getSurface(surfaceId));\n\t\tComponent.surfacesCollector.removeSurface(surfaceElementId);\n\t\tthis.surfaceIds_[surfaceElementId] = false;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Removes all surfaces that were removed during the repaint of their parents,\n\t * and weren't added back again. Component surfaces will be disposed.\n\t * @protected\n\t */\n\tremoveUnusedSurfaces_() {\n\t\tvar compIds = [];\n\t\tfor (var i = 0; i < this.removedSurfaces_.length; i++) {\n\t\t\tvar surface = this.removedSurfaces_[i];\n\t\t\tif (!surface.parent) {\n\t\t\t\tthis.removeSurface(surface.surfaceElementId);\n\t\t\t\tif (surface.componentName) {\n\t\t\t\t\tcompIds.push(surface.surfaceElementId);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis.disposeSubComponents_(compIds);\n\t}\n\n\t/**\n\t * Lifecycle. Renders the component into the DOM. Render phase replaces\n\t * decorate phase, without progressive enhancement support.\n\t *\n\t * Render Lifecycle:\n\t *   render - Decorate is manually called.\n\t *   render surfaces - All surfaces content are rendered.\n\t *   attribute synchronization - All synchronization methods are called.\n\t *   attach - Attach Lifecycle is called.\n\t *\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM, e.g.\n\t *     `component.render(null, existingElement)`.\n\t * @chainable\n\t */\n\trender(opt_parentElement, opt_siblingElement) {\n\t\tif (this.wasRendered) {\n\t\t\tthrow new Error(Component.Error.ALREADY_RENDERED);\n\t\t}\n\n\t\tthis.addElementSurface_();\n\t\tthis.renderContent_();\n\t\tthis.syncAttrs_();\n\t\tthis.emit('render');\n\t\tthis.attach(opt_parentElement, opt_siblingElement);\n\t\tthis.wasRendered = true;\n\t\treturn this;\n\t}\n\n\t/**\n\t * Renders this component as a subcomponent, meaning that no actual rendering is\n\t * needed since it was already rendered by the parent component. This just handles\n\t * other logics from the rendering lifecycle, like attaching event listeners.\n\t * @param {string=} opt_content The content that has already been rendered for this\n\t *   component\n\t */\n\trenderAsSubComponent(opt_content) {\n\t\tthis.addElementSurface_();\n\t\tif (opt_content && dom.isEmpty(this.element)) {\n\t\t\t// If we have the rendered content for this component, but it hasn't\n\t\t\t// been rendered in its element yet, we render it manually here. That\n\t\t\t// can happen if the subcomponent's element is set before the parent\n\t\t\t// element renders its content, making originally rendered content be\n\t\t\t// set on the wrong place.\n\t\t\tthis.replaceElementContent_(opt_content);\n\t\t}\n\t\tthis.syncAttrs_();\n\t\tthis.attach();\n\t\tthis.wasRendered = true;\n\t}\n\n\t/**\n\t * Renders a surface that holds a component.\n\t * @param {string} surfaceElementId\n\t * @param {string=} opt_content The content to be rendered.\n\t * @protected\n\t */\n\trenderComponentSurface_(surfaceElementId, opt_content) {\n\t\tvar component = ComponentCollector.components[surfaceElementId];\n\t\tif (component.wasRendered) {\n\t\t\tvar surface = this.getSurfaceFromElementId(surfaceElementId);\n\t\t\tComponent.componentsCollector.updateComponent(surfaceElementId, surface.componentData);\n\t\t} else if (this.decorating_) {\n\t\t\tcomponent.decorateAsSubComponent(opt_content);\n\t\t} else {\n\t\t\tcomponent.renderAsSubComponent(opt_content);\n\t\t}\n\t}\n\n\t/**\n\t * Renders this component's whole content. When decorating this will avoid\n\t * replacing the existing content if it's already correct.\n\t * @protected\n\t */\n\trenderContent_() {\n\t\tvar id = this.id;\n\t\tif (this.decorating_) {\n\t\t\tvar extendedContent = this.getElementExtendedContent();\n\t\t\tvar extendedCacheState = this.computeSurfaceCacheState_(extendedContent);\n\t\t\tvar htmlCacheState = this.computeSurfaceCacheState_(html.compress(this.element.outerHTML));\n\t\t\tif (!this.compareCacheStates_(htmlCacheState, extendedCacheState)) {\n\t\t\t\tthis.replaceElementContent_(extendedContent);\n\t\t\t}\n\t\t} else {\n\t\t\tthis.emitRenderSurfaceEvent_(id);\n\t\t}\n\t}\n\n\t/**\n\t * Renders the component element into the DOM.\n\t * @param {(string|Element)=} opt_parentElement Optional parent element\n\t *     to render the component.\n\t * @param {(string|Element)=} opt_siblingElement Optional sibling element\n\t *     to render the component before it. Relevant when the component needs\n\t *     to be rendered before an existing element in the DOM, e.g.\n\t *     `component.render(null, existingElement)`.\n\t * @protected\n\t */\n\trenderElement_(opt_parentElement, opt_siblingElement) {\n\t\tvar element = this.element;\n\t\telement.id = this.id;\n\t\tif (opt_siblingElement || !element.parentNode) {\n\t\t\tvar parent = dom.toElement(opt_parentElement) || this.DEFAULT_ELEMENT_PARENT;\n\t\t\tparent.insertBefore(element, dom.toElement(opt_siblingElement));\n\t\t}\n\t}\n\n\t/**\n\t * Renders the contents of all the surface placeholders found in the given content.\n\t * @param {string} content\n\t * @param {string} surfaceElementId The id of surface element the content is from.\n\t * @protected\n\t */\n\trenderPlaceholderSurfaceContents_(content, surfaceElementId) {\n\t\tvar instance = this;\n\t\tcontent.replace(Component.SURFACE_REGEX, function(match, id) {\n\t\t\tvar surface = instance.createPlaceholderSurface_(surfaceElementId, id);\n\t\t\tinstance.emitRenderSurfaceEvent_(surface.surfaceElementId);\n\t\t\treturn match;\n\t\t});\n\t}\n\n\t/**\n\t * Renders all surfaces contents ignoring the cache.\n\t * @param {Object.<string, Array=>} surfaces Object map where the key is\n\t *     the surface id and value the optional attributes list that caused\n\t *     the rerender.\n\t * @protected\n\t */\n\trenderSurfacesContent_(surfaces) {\n\t\tthis.generatedIdCount_ = {};\n\t\tthis.removedSurfaces_ = [];\n\n\t\tvar surfaceElementIds = Object.keys(surfaces);\n\t\tvar idIndex = surfaceElementIds.indexOf(this.id);\n\t\tif (idIndex !== -1) {\n\t\t\t// Always render the main content surface first, for performance reasons.\n\t\t\tsurfaceElementIds.splice(idIndex, 1);\n\t\t\tsurfaceElementIds = [this.id].concat(surfaceElementIds);\n\t\t}\n\n\t\tfor (var i = 0; i < surfaceElementIds.length; i++) {\n\t\t\tif (!this.getSurfaceFromElementId(surfaceElementIds[i]).handled) {\n\t\t\t\tthis.emitRenderSurfaceEvent_(surfaceElementIds[i], null, null, surfaces[surfaceElementIds[i]]);\n\t\t\t}\n\t\t}\n\t\tthis.updatePlaceholderSurfaces_();\n\t\tthis.eventsCollector_.detachUnusedListeners();\n\t\tthis.removeUnusedSurfaces_();\n\t}\n\n\t/**\n\t * Replaces the content of this component's element with the given one.\n\t * @param {string} content The content to be rendered.\n\t * @protected\n\t */\n\treplaceElementContent_(content) {\n\t\tvar element = this.element;\n\t\tvar newContent = this.buildFragment_(content);\n\t\tvar newElement = this.findElementInContent_(this.id, newContent);\n\t\tif (newElement) {\n\t\t\tthis.updateElementAttributes_(element, newElement);\n\t\t\tnewContent = newElement.childNodes;\n\t\t}\n\t\tdom.removeChildren(element);\n\t\tdom.append(element, newContent);\n\t}\n\n\t/**\n\t * Replaces the content of a surface with a new one.\n\t * @param {string} surfaceElementId The surface id.\n\t * @param {!Object} surface The surface object.\n\t * @param {string} content The content to be rendered.\n\t * @protected\n\t */\n\treplaceSurfaceContent_(surfaceElementId, surface, content) {\n\t\tcontent = this.replaceSurfacePlaceholders_(content, surfaceElementId, surface);\n\t\tif (surfaceElementId === this.id) {\n\t\t\tthis.replaceElementContent_(content);\n\t\t\treturn;\n\t\t}\n\n\t\tvar el = this.getSurfaceElement(surfaceElementId);\n\t\tvar frag = this.buildFragment_(content);\n\t\tvar element = this.findElementInContent_(surfaceElementId, frag);\n\t\tif (element) {\n\t\t\tsurface.element = element;\n\t\t\tdom.replace(el, surface.element);\n\t\t} else {\n\t\t\tdom.removeChildren(el);\n\t\t\tdom.append(el, frag);\n\t\t}\n\t}\n\n\t/**\n\t * Replaces the given content's surface placeholders with their real contents.\n\t * @param {string} content\n\t * @param {string} surfaceElementId The id of the surface element that contains\n\t *   the given content, or undefined if the content is from the main element.\n\t * @param {!Object} surface The surface object.\n\t * @return {string} The final string with replaced placeholders.\n\t * @protected\n\t */\n\treplaceSurfacePlaceholders_(content, surfaceElementId, surface) {\n\t\tif (!surface.componentName || surfaceElementId === this.id) {\n\t\t\tthis.addToRemovedSurfaces_(surface.children || []);\n\t\t\tsurface.children = [];\n\t\t}\n\n\t\tvar instance = this;\n\t\treturn content.replace(Component.SURFACE_REGEX, function(match, id) {\n\t\t\t// Surfaces should already have been created before being rendered so they can be\n\t\t\t// accessed from their getSurfaceContent calls.\n\t\t\tvar placeholderSurface = instance.createPlaceholderSurface_(surfaceElementId, id);\n\t\t\tid = placeholderSurface.surfaceElementId;\n\t\t\tplaceholderSurface.handled = true;\n\t\t\tplaceholderSurface.parent = surfaceElementId;\n\t\t\tsurface.children.push(id);\n\n\t\t\tvar surfaceContent = instance.getSurfaceContent_(id);\n\t\t\tvar surfaceHtml = instance.getSurfaceHtml_(placeholderSurface, surfaceContent);\n\t\t\tvar expandedHtml = instance.replaceSurfacePlaceholders_(surfaceHtml, id, placeholderSurface);\n\t\t\tinstance.collectedSurfaces_.push({\n\t\t\t\tcacheContent: surfaceContent,\n\t\t\t\tcontent: expandedHtml,\n\t\t\t\tsurface: placeholderSurface\n\t\t\t});\n\n\t\t\treturn expandedHtml;\n\t\t});\n\t}\n\n\t/**\n\t * Setter logic for element attribute.\n\t * @param {string|Element} val\n\t * @return {Element}\n\t * @protected\n\t */\n\tsetterElementFn_(val) {\n\t\tvar element = dom.toElement(val);\n\t\tif (!element) {\n\t\t\telement = this.valueElementFn_();\n\t\t}\n\t\treturn element;\n\t}\n\n\t/**\n\t * Attribute synchronization logic for the `elementClasses` attribute.\n\t * @param {string} newVal\n\t * @param {string} prevVal\n\t */\n\tsyncElementClasses(newVal, prevVal) {\n\t\tvar classesToAdd = this.constructor.ELEMENT_CLASSES_MERGED;\n\t\tif (newVal) {\n\t\t\tclassesToAdd = classesToAdd + ' ' + newVal;\n\t\t}\n\t\tif (prevVal) {\n\t\t\tdom.removeClasses(this.element, prevVal);\n\t\t}\n\t\tdom.addClasses(this.element, classesToAdd);\n\t}\n\n\t/**\n\t * Attribute synchronization logic for `visible` attribute.\n\t * Updates the element's display value according to its visibility.\n\t * @param {boolean} newVal\n\t */\n\tsyncVisible(newVal) {\n\t\tthis.element.style.display = newVal ? '' : 'none';\n\t}\n\n\t/**\n\t * Sets the attributes from the second element to the first element.\n\t * @param {!Element} element\n\t * @param {!Element} newElement\n\t * @protected\n\t */\n\tupdateElementAttributes_(element, newElement) {\n\t\tvar attrs = newElement.attributes;\n\t\tfor (var i = 0; i < attrs.length; i++) {\n\t\t\t// The \"id\" and \"class\" html attributes are already synced via the \"id\"\n\t\t\t// and \"elementClasses\" component attributes, respectively.\n\t\t\tif (attrs[i].name !== 'id' && attrs[i].name !== 'class') {\n\t\t\t\telement.setAttribute(attrs[i].name, attrs[i].value);\n\t\t\t}\n\t\t}\n\n\t\tif (element.tagName !== newElement.tagName) {\n\t\t\tconsole.error(\n\t\t\t\t'The component named \"' + this.getName() + '\" tried to change the component ' +\n\t\t\t\t'element\\'s tag name, which is not allowed. Make sure to always return the same tag ' +\n\t\t\t\t'name for the component element on the renderer\\'s getSurfaceContent. This may also ' +\n\t\t\t\t'have been caused by passing an element to this component with a different tag name ' +\n\t\t\t\t'from the one it uses.'\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * Updates a surface after it has been rendered through placeholders.\n\t * @param {!{content: string, cacheContent: string, surfaceElementId: string}} collectedData\n\t *   Data about the collected surface. Should have the surface's id, content and the\n\t *   content that should be cached for it.\n\t * @protected\n\t */\n\tupdatePlaceholderSurface_(collectedData) {\n\t\tvar surface = collectedData.surface;\n\t\tvar surfaceElementId = surface.surfaceElementId;\n\t\tif (surface.componentName) {\n\t\t\t// Elements of component surfaces are unchangeable, so we need to replace the\n\t\t\t// rendered element with the component's.\n\t\t\tdom.replace(this.findElementById_(surfaceElementId), this.getSurfaceElement(surfaceElementId, surface));\n\n\t\t\t// Component surfaces need to be handled in case some internal details have changed.\n\t\t\tthis.emitRenderSurfaceEvent_(surfaceElementId, collectedData.content, collectedData.cacheContent);\n\t\t} else {\n\t\t\t// This surface's element has either changed or never been created yet. Let's just\n\t\t\t// reset it to null, so it can be fetched from the dom again when necessary. Also,\n\t\t\t// since there's no need to do cache checks or rerender, let's just attach its\n\t\t\t// listeners and cache its content manually.\n\t\t\tsurface.element = null;\n\t\t\tthis.cacheSurfaceContent(surfaceElementId, collectedData.cacheContent);\n\t\t\tthis.eventsCollector_.attachListeners(collectedData.cacheContent, surfaceElementId);\n\t\t}\n\t}\n\n\t/**\n\t * Updates all collected surfaces.\n\t * @protected\n\t */\n\tupdatePlaceholderSurfaces_() {\n\t\tfor (var i = this.collectedSurfaces_.length - 1; i >= 0; i--) {\n\t\t\tthis.updatePlaceholderSurface_(this.collectedSurfaces_[i]);\n\t\t\tthis.collectedSurfaces_[i].surface.handled = false;\n\t\t}\n\t\tthis.collectedSurfaces_ = [];\n\t}\n\n\t/**\n\t * Validator logic for element attribute.\n\t * @param {string|Element} val\n\t * @return {boolean} True if val is a valid element.\n\t * @protected\n\t */\n\tvalidatorElementFn_(val) {\n\t\treturn core.isElement(val) || core.isString(val);\n\t}\n\n\t/**\n\t * Validator logic for elementClasses attribute.\n\t * @param {string} val\n\t * @return {boolean} True if val is a valid element classes.\n\t * @protected\n\t */\n\tvalidatorElementClassesFn_(val) {\n\t\treturn core.isString(val);\n\t}\n\n\t/**\n\t * Validator logic for the `events` attribute.\n\t * @param {Object} val\n\t * @return {boolean}\n\t * @protected\n\t */\n\tvalidatorEventsFn_(val) {\n\t\treturn !core.isDefAndNotNull(val) || core.isObject(val);\n\t}\n\n\t/**\n\t * Validator logic for the `id` attribute.\n\t * @param {string} val\n\t * @return {boolean} True if val is a valid id.\n\t * @protected\n\t */\n\tvalidatorIdFn_(val) {\n\t\treturn core.isString(val);\n\t}\n\n\t/**\n\t * Provides the default value for element attribute.\n\t * @return {!Element} The element.\n\t * @protected\n\t */\n\tvalueElementFn_() {\n\t\tif (!this.id) {\n\t\t\t// This may happen because the default value of \"id\" depends on \"element\",\n\t\t\t// and the default value of \"element\" depends on \"id\".\n\t\t\tthis.id = this.makeId_();\n\t\t}\n\t\tvar element = this.findElementInContent_(this.id, this.getElementContent_(true) || '');\n\t\tif (!element) {\n\t\t\telement = this.findElementInContent_(this.id, this.getComponentHtml(''));\n\t\t}\n\t\tdom.removeChildren(element);\n\t\tdom.exitDocument(element);\n\t\treturn element;\n\t}\n\n\t/**\n\t * Provides the default value for id attribute.\n\t * @return {string} The id.\n\t * @protected\n\t */\n\tvalueIdFn_() {\n\t\tvar element = this.element;\n\t\treturn (element && element.id) ? element.id : this.makeId_();\n\t}\n\n\t/**\n\t * Wraps the content with the given tag, unless the content already has an element with the\n\t * correct id.\n\t * @param {string} content\n\t * @param {string} id\n\t * @param {string} tag\n\t * @return {string}\n\t * @protected\n\t */\n\twrapContentIfNecessary(content, id, tag) {\n\t\tif (!this.checkHasElementTag_(content, id)) {\n\t\t\tcontent = '<' + tag + ' id=\"' + id + '\">' + content + '</' + tag + '>';\n\t\t}\n\t\treturn content;\n\t}\n}\n\n/**\n * Helper responsible for extracting components from strings and config data.\n * @type {!ComponentCollector}\n * @protected\n * @static\n */\nComponent.componentsCollector = new ComponentCollector();\n\n/**\n * Helper responsible for temporarily holding surface data.\n * @type {!SurfaceCollector}\n * @protected\n * @static\n */\nComponent.surfacesCollector = new SurfaceCollector();\n\n/**\n * Component attributes definition.\n * @type {Object}\n * @static\n */\nComponent.ATTRS = {\n\t/**\n\t * Component element bounding box.\n\t * @type {Element}\n\t * @writeOnce\n\t */\n\telement: {\n\t\tsetter: 'setterElementFn_',\n\t\tvalidator: 'validatorElementFn_',\n\t\tvalueFn: 'valueElementFn_',\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * CSS classes to be applied to the element.\n\t * @type {Array.<string>}\n\t */\n\telementClasses: {\n\t\tvalidator: 'validatorElementClassesFn_'\n\t},\n\n\t/**\n\t * Listeners that should be attached to this component. Should be provided as an object,\n\t * where the keys are event names and the values are the listener functions (or function\n\t * names).\n\t * @type {Object<string, (function()|string|{selector: string, fn: function()|string})>}\n\t */\n\tevents: {\n\t\tvalidator: 'validatorEventsFn_',\n\t\tvalue: null\n\t},\n\n\t/**\n\t * Component element id. If not specified will be generated.\n\t * @type {string}\n\t * @writeOnce\n\t */\n\tid: {\n\t\tvalidator: 'validatorIdFn_',\n\t\tvalueFn: 'valueIdFn_',\n\t\twriteOnce: true\n\t},\n\n\t/**\n\t * Indicates if the component is visible or not.\n\t * @type {boolean}\n\t */\n\tvisible: {\n\t\tvalidator: core.isBoolean,\n\t\tvalue: true\n\t}\n};\n\n/**\n * CSS classes to be applied to the element.\n * @type {string}\n * @protected\n * @static\n */\nComponent.ELEMENT_CLASSES = 'component';\n\n/**\n * Element tag name is a string that specifies the type of element to be\n * created. The nodeName of the created element is initialized with the\n * value of tag name.\n * @type {string}\n * @default div\n * @protected\n * @static\n */\nComponent.ELEMENT_TAG_NAME = 'div';\n\n/**\n * The `ComponentRenderer` that should be used. Components need to set this\n * to a subclass of `ComponentRenderer` that has the rendering logic, like\n * `SoyRenderer`.\n * @type {!ComponentRenderer}\n * @static\n */\nComponent.RENDERER = ComponentRenderer;\n\n/**\n * The regex used to search for surface placeholders.\n * @type {RegExp}\n * @static\n */\nComponent.SURFACE_REGEX = /\\%\\%\\%\\%~s(?:-([^~:]+))?~\\%\\%\\%\\%/g;\n\n/**\n * Surface tag name is a string that specifies the type of element to be\n * created for the surfaces. The nodeName of the created element is\n * initialized with the value of tag name.\n * @type {string}\n * @default div\n * @protected\n * @static\n */\nComponent.SURFACE_TAG_NAME = 'div';\n\n/**\n * Cache states for the component.\n * @enum {string}\n */\nComponent.Cache = {\n\t/**\n\t * Cache not initialized.\n\t */\n\tNOT_INITIALIZED: -2\n};\n\n/**\n * Errors thrown by the component.\n * @enum {string}\n */\nComponent.Error = {\n\t/**\n\t * Error when the component is already rendered and another render attempt\n\t * is made.\n\t */\n\tALREADY_RENDERED: 'Component already rendered'\n};\n\n/**\n * A list with attribute names that will automatically be rejected as invalid.\n * @type {!Array<string>}\n */\nComponent.INVALID_ATTRS = ['components', 'elementContent'];\n\nexport default Component;\n"],"sourceRoot":"/source/"}